package Modules

import (
	"fmt"
	"log"
	"os/exec"
	"strconv"
	"strings"
	"time"

	Log "github.com/distribRuted/framework/library/log"
	Parameters "github.com/distribRuted/framework/library/parameters"
)

func (F *Module) Module_Distributed_Nmap_Init() {

	var (
		moduleShortName   string = "Distributed_Nmap"
		moduleName        string = "Distributed Nmap"
		moduleDescription string = "Distributed Nmap demonstration for DEF CON 32"
		moduleAuthor      string = "@numanozdemircom <root@numanozdemir.com>"
	)

	// ATTENTION! Do not edit or remove the line below:
	Set_Module(moduleShortName, moduleName, moduleDescription, moduleAuthor)
}

// Variables of user inputs to pass to the Start() function.
var (
	targetHost         string
	startPort, endPort int
	startTime          time.Time
	IPrange            = [254]string{"45.33.32.1", "45.33.32.2", "45.33.32.3", "45.33.32.4", "45.33.32.5", "45.33.32.6", "45.33.32.7", "45.33.32.8", "45.33.32.9", "45.33.32.10", "45.33.32.11", "45.33.32.12", "45.33.32.13", "45.33.32.14", "45.33.32.15", "45.33.32.16", "45.33.32.17", "45.33.32.18", "45.33.32.19", "45.33.32.20", "45.33.32.21", "45.33.32.22", "45.33.32.23", "45.33.32.24", "45.33.32.25", "45.33.32.26", "45.33.32.27", "45.33.32.28", "45.33.32.29", "45.33.32.30", "45.33.32.31", "45.33.32.32", "45.33.32.33", "45.33.32.34", "45.33.32.35", "45.33.32.36", "45.33.32.37", "45.33.32.38", "45.33.32.39", "45.33.32.40", "45.33.32.41", "45.33.32.42", "45.33.32.43", "45.33.32.44", "45.33.32.45", "45.33.32.46", "45.33.32.47", "45.33.32.48", "45.33.32.49", "45.33.32.50", "45.33.32.51", "45.33.32.52", "45.33.32.53", "45.33.32.54", "45.33.32.55", "45.33.32.56", "45.33.32.57", "45.33.32.58", "45.33.32.59", "45.33.32.60", "45.33.32.61", "45.33.32.62", "45.33.32.63", "45.33.32.64", "45.33.32.65", "45.33.32.66", "45.33.32.67", "45.33.32.68", "45.33.32.69", "45.33.32.70", "45.33.32.71", "45.33.32.72", "45.33.32.73", "45.33.32.74", "45.33.32.75", "45.33.32.76", "45.33.32.77", "45.33.32.78", "45.33.32.79", "45.33.32.80", "45.33.32.81", "45.33.32.82", "45.33.32.83", "45.33.32.84", "45.33.32.85", "45.33.32.86", "45.33.32.87", "45.33.32.88", "45.33.32.89", "45.33.32.90", "45.33.32.91", "45.33.32.92", "45.33.32.93", "45.33.32.94", "45.33.32.95", "45.33.32.96", "45.33.32.97", "45.33.32.98", "45.33.32.99", "45.33.32.100", "45.33.32.101", "45.33.32.102", "45.33.32.103", "45.33.32.104", "45.33.32.105", "45.33.32.106", "45.33.32.107", "45.33.32.108", "45.33.32.109", "45.33.32.110", "45.33.32.111", "45.33.32.112", "45.33.32.113", "45.33.32.114", "45.33.32.115", "45.33.32.116", "45.33.32.117", "45.33.32.118", "45.33.32.119", "45.33.32.120", "45.33.32.121", "45.33.32.122", "45.33.32.123", "45.33.32.124", "45.33.32.125", "45.33.32.126", "45.33.32.127", "45.33.32.128", "45.33.32.129", "45.33.32.130", "45.33.32.131", "45.33.32.132", "45.33.32.133", "45.33.32.134", "45.33.32.135", "45.33.32.136", "45.33.32.137", "45.33.32.138", "45.33.32.139", "45.33.32.140", "45.33.32.141", "45.33.32.142", "45.33.32.143", "45.33.32.144", "45.33.32.145", "45.33.32.146", "45.33.32.147", "45.33.32.148", "45.33.32.149", "45.33.32.150", "45.33.32.151", "45.33.32.152", "45.33.32.153", "45.33.32.154", "45.33.32.155", "45.33.32.156", "45.33.32.157", "45.33.32.158", "45.33.32.159", "45.33.32.160", "45.33.32.161", "45.33.32.162", "45.33.32.163", "45.33.32.164", "45.33.32.165", "45.33.32.166", "45.33.32.167", "45.33.32.168", "45.33.32.169", "45.33.32.170", "45.33.32.171", "45.33.32.172", "45.33.32.173", "45.33.32.174", "45.33.32.175", "45.33.32.176", "45.33.32.177", "45.33.32.178", "45.33.32.179", "45.33.32.180", "45.33.32.181", "45.33.32.182", "45.33.32.183", "45.33.32.184", "45.33.32.185", "45.33.32.186", "45.33.32.187", "45.33.32.188", "45.33.32.189", "45.33.32.190", "45.33.32.191", "45.33.32.192", "45.33.32.193", "45.33.32.194", "45.33.32.195", "45.33.32.196", "45.33.32.197", "45.33.32.198", "45.33.32.199", "45.33.32.200", "45.33.32.201", "45.33.32.202", "45.33.32.203", "45.33.32.204", "45.33.32.205", "45.33.32.206", "45.33.32.207", "45.33.32.208", "45.33.32.209", "45.33.32.210", "45.33.32.211", "45.33.32.212", "45.33.32.213", "45.33.32.214", "45.33.32.215", "45.33.32.216", "45.33.32.217", "45.33.32.218", "45.33.32.219", "45.33.32.220", "45.33.32.221", "45.33.32.222", "45.33.32.223", "45.33.32.224", "45.33.32.225", "45.33.32.226", "45.33.32.227", "45.33.32.228", "45.33.32.229", "45.33.32.230", "45.33.32.231", "45.33.32.232", "45.33.32.233", "45.33.32.234", "45.33.32.235", "45.33.32.236", "45.33.32.237", "45.33.32.238", "45.33.32.239", "45.33.32.240", "45.33.32.241", "45.33.32.242", "45.33.32.243", "45.33.32.244", "45.33.32.245", "45.33.32.246", "45.33.32.247", "45.33.32.248", "45.33.32.249", "45.33.32.250", "45.33.32.251", "45.33.32.252", "45.33.32.253", "45.33.32.254"}
)

// Questions to ask the user are defined here.
func (F *Module) Module_Distributed_Nmap_Parameters() {

	// Add_Parameter(PARAMETER_NAME, DESCRIPTION, DEFAULT_VALUE, IS_REQUIRED)
	Parameters.Add_Parameter("TARGET_HOST", "Enter the target host to scan.", "", true)
	Parameters.Add_Parameter("START_PORT", "Enter the starting port number for scanning.", "", true)
	Parameters.Add_Parameter("END_PORT", "Enter the ending port number for scanning.", "", true)
}

// This function will start the attack.
func (F *Module) Module_Distributed_Nmap_Start() {

	startTime = time.Now()

	targetHost, _ = Parameters.Read_Parameter_Str("TARGET_HOST")
	startPort, _ = Parameters.Read_Parameter_Int("START_PORT")
	endPort, _ = Parameters.Read_Parameter_Int("END_PORT")

}

func (F *Module) Module_Distributed_Nmap_Server_Role() {

	var totalPorts int = len(IPrange)

	Distribute("PORT_DISTRIBUTION", totalPorts)

	Run_Distributed_Task("PORT_DISTRIBUTION", "Module_Distributed_Nmap_Run_Nmap", true, true)

}

func (F *Module) Module_Distributed_Nmap_Client_Role() {

	Run_Distributed_Task("PORT_DISTRIBUTION", "Module_Distributed_Nmap_Run_Nmap", true, true)

}

func (F *Module) Module_Distributed_Nmap_Success_Indicator() string {
	return "Nmap done:"
}

func (F *Module) Module_Distributed_Nmap_Stop() {
	// Goodbye.
	Log.ScanOutputToFile(Parameters.AttackOutput)
}

func (F *Module) Module_Distributed_Nmap_Run_Nmap(taskID int, taskName string, taskFrom, taskTo int) {

	var nmapOutput string

	var ipRange string = strings.Join(IPrange[taskFrom:taskTo+1], " ")

	var enteredParamter string = "nmap " + ipRange + " -v -A -sU --top-ports 1000"
	log.Println("Entered Nmap command on this server =", enteredParamter)
	output, err := exec.Command("/bin/sh", "-c", enteredParamter).Output()
	if err != nil {
		Log.Create("Nmap could not be started: "+err.Error(), "Module", "HIGH")
		Log.PrintMsg("Nmap could not be started. Check your OS command.")
	}

	nmapOutput += string(output)

	if strings.Contains(nmapOutput, (&Module{}).Module_Distributed_Nmap_Success_Indicator()) {
		Parameters.AttackOutput += nmapOutput
		if Parameters.IsClient {
			Parameters.ShareOutput(0, taskName, nmapOutput) // Send scan results to the server.
		}
	}

	if Parameters.IsServer {
		fmt.Println("\nThe attack on this server was completed in " + strconv.FormatFloat(time.Since(startTime).Seconds(), 'f', -1, 64) + " seconds.")
	}

	// Update the state of the relevant task.
	Parameters.UpdateTask(taskID, "Succeeded")

	Stop_Attack()

}
